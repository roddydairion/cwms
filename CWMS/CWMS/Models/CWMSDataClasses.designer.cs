#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CWMS.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CWMSDatabase")]
	public partial class CWMSDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertComponent(Component instance);
    partial void UpdateComponent(Component instance);
    partial void DeleteComponent(Component instance);
    partial void InsertComponentStock(ComponentStock instance);
    partial void UpdateComponentStock(ComponentStock instance);
    partial void DeleteComponentStock(ComponentStock instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertOrderItem(OrderItem instance);
    partial void UpdateOrderItem(OrderItem instance);
    partial void DeleteOrderItem(OrderItem instance);
    partial void InsertProductComponent(ProductComponent instance);
    partial void UpdateProductComponent(ProductComponent instance);
    partial void DeleteProductComponent(ProductComponent instance);
    partial void InsertProductStock(ProductStock instance);
    partial void UpdateProductStock(ProductStock instance);
    partial void DeleteProductStock(ProductStock instance);
    partial void InsertOrderItemsStock(OrderItemsStock instance);
    partial void UpdateOrderItemsStock(OrderItemsStock instance);
    partial void DeleteOrderItemsStock(OrderItemsStock instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCarBrand(CarBrand instance);
    partial void UpdateCarBrand(CarBrand instance);
    partial void DeleteCarBrand(CarBrand instance);
    partial void InsertCarModel(CarModel instance);
    partial void UpdateCarModel(CarModel instance);
    partial void DeleteCarModel(CarModel instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertProductGroup(ProductGroup instance);
    partial void UpdateProductGroup(ProductGroup instance);
    partial void DeleteProductGroup(ProductGroup instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertGiftCard(GiftCard instance);
    partial void UpdateGiftCard(GiftCard instance);
    partial void DeleteGiftCard(GiftCard instance);
    partial void InsertGiftCardUsage(GiftCardUsage instance);
    partial void UpdateGiftCardUsage(GiftCardUsage instance);
    partial void DeleteGiftCardUsage(GiftCardUsage instance);
    #endregion
		
		public CWMSDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CWMSDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CWMSDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CWMSDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CWMSDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CWMSDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Component> Components
		{
			get
			{
				return this.GetTable<Component>();
			}
		}
		
		public System.Data.Linq.Table<ComponentStock> ComponentStocks
		{
			get
			{
				return this.GetTable<ComponentStock>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<OrderItem> OrderItems
		{
			get
			{
				return this.GetTable<OrderItem>();
			}
		}
		
		public System.Data.Linq.Table<ProductComponent> ProductComponents
		{
			get
			{
				return this.GetTable<ProductComponent>();
			}
		}
		
		public System.Data.Linq.Table<ProductStock> ProductStocks
		{
			get
			{
				return this.GetTable<ProductStock>();
			}
		}
		
		public System.Data.Linq.Table<OrderItemsStock> OrderItemsStocks
		{
			get
			{
				return this.GetTable<OrderItemsStock>();
			}
		}
		
		public System.Data.Linq.Table<TempComponentStockQuantity> TempComponentStockQuantities
		{
			get
			{
				return this.GetTable<TempComponentStockQuantity>();
			}
		}
		
		public System.Data.Linq.Table<TempProductStockQuantity> TempProductStockQuantities
		{
			get
			{
				return this.GetTable<TempProductStockQuantity>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CarBrand> CarBrands
		{
			get
			{
				return this.GetTable<CarBrand>();
			}
		}
		
		public System.Data.Linq.Table<CarModel> CarModels
		{
			get
			{
				return this.GetTable<CarModel>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup> ProductGroups
		{
			get
			{
				return this.GetTable<ProductGroup>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<GiftCard> GiftCards
		{
			get
			{
				return this.GetTable<GiftCard>();
			}
		}
		
		public System.Data.Linq.Table<GiftCardUsage> GiftCardUsages
		{
			get
			{
				return this.GetTable<GiftCardUsage>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suppliers")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _Telephone;
		
		private EntitySet<ComponentStock> _ComponentStocks;
		
		private EntitySet<ProductStock> _ProductStocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    #endregion
		
		public Supplier()
		{
			this._ComponentStocks = new EntitySet<ComponentStock>(new Action<ComponentStock>(this.attach_ComponentStocks), new Action<ComponentStock>(this.detach_ComponentStocks));
			this._ProductStocks = new EntitySet<ProductStock>(new Action<ProductStock>(this.attach_ProductStocks), new Action<ProductStock>(this.detach_ProductStocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="NVarChar(100)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ComponentStock", Storage="_ComponentStocks", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<ComponentStock> ComponentStocks
		{
			get
			{
				return this._ComponentStocks;
			}
			set
			{
				this._ComponentStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ProductStock", Storage="_ProductStocks", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<ProductStock> ProductStocks
		{
			get
			{
				return this._ProductStocks;
			}
			set
			{
				this._ProductStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComponentStocks(ComponentStock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_ComponentStocks(ComponentStock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_ProductStocks(ProductStock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_ProductStocks(ProductStock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Components")]
	public partial class Component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Unit;
		
		private EntitySet<ComponentStock> _ComponentStocks;
		
		private EntitySet<ProductComponent> _ProductComponents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public Component()
		{
			this._ComponentStocks = new EntitySet<ComponentStock>(new Action<ComponentStock>(this.attach_ComponentStocks), new Action<ComponentStock>(this.detach_ComponentStocks));
			this._ProductComponents = new EntitySet<ProductComponent>(new Action<ProductComponent>(this.attach_ProductComponents), new Action<ProductComponent>(this.detach_ProductComponents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_ComponentStock", Storage="_ComponentStocks", ThisKey="Id", OtherKey="ComponentId")]
		public EntitySet<ComponentStock> ComponentStocks
		{
			get
			{
				return this._ComponentStocks;
			}
			set
			{
				this._ComponentStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_ProductComponent", Storage="_ProductComponents", ThisKey="Id", OtherKey="ComponentId")]
		public EntitySet<ProductComponent> ProductComponents
		{
			get
			{
				return this._ProductComponents;
			}
			set
			{
				this._ProductComponents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComponentStocks(ComponentStock entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_ComponentStocks(ComponentStock entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
		
		private void attach_ProductComponents(ProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_ProductComponents(ProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComponentStocks")]
	public partial class ComponentStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ComponentId;
		
		private decimal _CurrentQuantity;
		
		private decimal _OriginalQuantity;
		
		private System.DateTime _Date;
		
		private decimal _Cost;
		
		private System.Nullable<int> _SupplierId;
		
		private EntitySet<OrderItemsStock> _OrderItemsStocks;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnComponentIdChanging(int value);
    partial void OnComponentIdChanged();
    partial void OnCurrentQuantityChanging(decimal value);
    partial void OnCurrentQuantityChanged();
    partial void OnOriginalQuantityChanging(decimal value);
    partial void OnOriginalQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    #endregion
		
		public ComponentStock()
		{
			this._OrderItemsStocks = new EntitySet<OrderItemsStock>(new Action<OrderItemsStock>(this.attach_OrderItemsStocks), new Action<OrderItemsStock>(this.detach_OrderItemsStocks));
			this._Component = default(EntityRef<Component>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentId", DbType="Int NOT NULL")]
		public int ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentQuantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal CurrentQuantity
		{
			get
			{
				return this._CurrentQuantity;
			}
			set
			{
				if ((this._CurrentQuantity != value))
				{
					this.OnCurrentQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurrentQuantity = value;
					this.SendPropertyChanged("CurrentQuantity");
					this.OnCurrentQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalQuantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal OriginalQuantity
		{
			get
			{
				return this._OriginalQuantity;
			}
			set
			{
				if ((this._OriginalQuantity != value))
				{
					this.OnOriginalQuantityChanging(value);
					this.SendPropertyChanging();
					this._OriginalQuantity = value;
					this.SendPropertyChanged("OriginalQuantity");
					this.OnOriginalQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int")]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentStock_OrderItemsStock", Storage="_OrderItemsStocks", ThisKey="Id", OtherKey="ComponentStockId")]
		public EntitySet<OrderItemsStock> OrderItemsStocks
		{
			get
			{
				return this._OrderItemsStocks;
			}
			set
			{
				this._OrderItemsStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_ComponentStock", Storage="_Component", ThisKey="ComponentId", OtherKey="Id", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.ComponentStocks.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.ComponentStocks.Add(this);
						this._ComponentId = value.Id;
					}
					else
					{
						this._ComponentId = default(int);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ComponentStock", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.ComponentStocks.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.ComponentStocks.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItemsStocks(OrderItemsStock entity)
		{
			this.SendPropertyChanging();
			entity.ComponentStock = this;
		}
		
		private void detach_OrderItemsStocks(OrderItemsStock entity)
		{
			this.SendPropertyChanging();
			entity.ComponentStock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Note;
		
		private string _Address;
		
		private string _Telephone;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    #endregion
		
		public Customer()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(300)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="NVarChar(100)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Car", Storage="_Cars", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderItems")]
	public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OrderId;
		
		private int _ProductId;
		
		private decimal _Quantity;
		
		private int _PriceId;
		
		private decimal _TotalPrice;
		
		private EntitySet<OrderItemsStock> _OrderItemsStocks;
		
		private EntityRef<Price> _Price;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnPriceIdChanging(int value);
    partial void OnPriceIdChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public OrderItem()
		{
			this._OrderItemsStocks = new EntitySet<OrderItemsStock>(new Action<OrderItemsStock>(this.attach_OrderItemsStocks), new Action<OrderItemsStock>(this.detach_OrderItemsStocks));
			this._Price = default(EntityRef<Price>);
			this._Product = default(EntityRef<Product>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceId", DbType="Int NOT NULL")]
		public int PriceId
		{
			get
			{
				return this._PriceId;
			}
			set
			{
				if ((this._PriceId != value))
				{
					if (this._Price.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceIdChanging(value);
					this.SendPropertyChanging();
					this._PriceId = value;
					this.SendPropertyChanged("PriceId");
					this.OnPriceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderItem_OrderItemsStock", Storage="_OrderItemsStocks", ThisKey="Id", OtherKey="OrderItemId")]
		public EntitySet<OrderItemsStock> OrderItemsStocks
		{
			get
			{
				return this._OrderItemsStocks;
			}
			set
			{
				this._OrderItemsStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Price_OrderItem", Storage="_Price", ThisKey="PriceId", OtherKey="Id", IsForeignKey=true)]
		public Price Price
		{
			get
			{
				return this._Price.Entity;
			}
			set
			{
				Price previousValue = this._Price.Entity;
				if (((previousValue != value) 
							|| (this._Price.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Price.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Price.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._PriceId = value.Id;
					}
					else
					{
						this._PriceId = default(int);
					}
					this.SendPropertyChanged("Price");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderItem", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItemsStocks(OrderItemsStock entity)
		{
			this.SendPropertyChanging();
			entity.OrderItem = this;
		}
		
		private void detach_OrderItemsStocks(OrderItemsStock entity)
		{
			this.SendPropertyChanging();
			entity.OrderItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductComponent")]
	public partial class ProductComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private int _ComponentId;
		
		private decimal _Quantity;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnComponentIdChanging(int value);
    partial void OnComponentIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    #endregion
		
		public ProductComponent()
		{
			this._Component = default(EntityRef<Component>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentId", DbType="Int NOT NULL")]
		public int ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_ProductComponent", Storage="_Component", ThisKey="ComponentId", OtherKey="Id", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.ProductComponents.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.ProductComponents.Add(this);
						this._ComponentId = value.Id;
					}
					else
					{
						this._ComponentId = default(int);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductComponent", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductComponents.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductComponents.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductStocks")]
	public partial class ProductStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private decimal _CurrentQuantity;
		
		private decimal _OriginalQuantity;
		
		private System.DateTime _Date;
		
		private decimal _Cost;
		
		private System.Nullable<int> _SupplierId;
		
		private EntitySet<OrderItemsStock> _OrderItemsStocks;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCurrentQuantityChanging(decimal value);
    partial void OnCurrentQuantityChanged();
    partial void OnOriginalQuantityChanging(decimal value);
    partial void OnOriginalQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    #endregion
		
		public ProductStock()
		{
			this._OrderItemsStocks = new EntitySet<OrderItemsStock>(new Action<OrderItemsStock>(this.attach_OrderItemsStocks), new Action<OrderItemsStock>(this.detach_OrderItemsStocks));
			this._Supplier = default(EntityRef<Supplier>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentQuantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal CurrentQuantity
		{
			get
			{
				return this._CurrentQuantity;
			}
			set
			{
				if ((this._CurrentQuantity != value))
				{
					this.OnCurrentQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurrentQuantity = value;
					this.SendPropertyChanged("CurrentQuantity");
					this.OnCurrentQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalQuantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal OriginalQuantity
		{
			get
			{
				return this._OriginalQuantity;
			}
			set
			{
				if ((this._OriginalQuantity != value))
				{
					this.OnOriginalQuantityChanging(value);
					this.SendPropertyChanging();
					this._OriginalQuantity = value;
					this.SendPropertyChanged("OriginalQuantity");
					this.OnOriginalQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int")]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductStock_OrderItemsStock", Storage="_OrderItemsStocks", ThisKey="Id", OtherKey="ProductStockId")]
		public EntitySet<OrderItemsStock> OrderItemsStocks
		{
			get
			{
				return this._OrderItemsStocks;
			}
			set
			{
				this._OrderItemsStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ProductStock", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.ProductStocks.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.ProductStocks.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductStock", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductStocks.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductStocks.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItemsStocks(OrderItemsStock entity)
		{
			this.SendPropertyChanging();
			entity.ProductStock = this;
		}
		
		private void detach_OrderItemsStocks(OrderItemsStock entity)
		{
			this.SendPropertyChanging();
			entity.ProductStock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderItemsStocks")]
	public partial class OrderItemsStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OrderItemId;
		
		private System.Nullable<int> _ProductStockId;
		
		private System.Nullable<int> _ComponentStockId;
		
		private decimal _Quantity;
		
		private EntityRef<ComponentStock> _ComponentStock;
		
		private EntityRef<OrderItem> _OrderItem;
		
		private EntityRef<ProductStock> _ProductStock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderItemIdChanging(int value);
    partial void OnOrderItemIdChanged();
    partial void OnProductStockIdChanging(System.Nullable<int> value);
    partial void OnProductStockIdChanged();
    partial void OnComponentStockIdChanging(System.Nullable<int> value);
    partial void OnComponentStockIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    #endregion
		
		public OrderItemsStock()
		{
			this._ComponentStock = default(EntityRef<ComponentStock>);
			this._OrderItem = default(EntityRef<OrderItem>);
			this._ProductStock = default(EntityRef<ProductStock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderItemId", DbType="Int NOT NULL")]
		public int OrderItemId
		{
			get
			{
				return this._OrderItemId;
			}
			set
			{
				if ((this._OrderItemId != value))
				{
					if (this._OrderItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderItemIdChanging(value);
					this.SendPropertyChanging();
					this._OrderItemId = value;
					this.SendPropertyChanged("OrderItemId");
					this.OnOrderItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStockId", DbType="Int")]
		public System.Nullable<int> ProductStockId
		{
			get
			{
				return this._ProductStockId;
			}
			set
			{
				if ((this._ProductStockId != value))
				{
					if (this._ProductStock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductStockIdChanging(value);
					this.SendPropertyChanging();
					this._ProductStockId = value;
					this.SendPropertyChanged("ProductStockId");
					this.OnProductStockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentStockId", DbType="Int")]
		public System.Nullable<int> ComponentStockId
		{
			get
			{
				return this._ComponentStockId;
			}
			set
			{
				if ((this._ComponentStockId != value))
				{
					if (this._ComponentStock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentStockIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentStockId = value;
					this.SendPropertyChanged("ComponentStockId");
					this.OnComponentStockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(18,0) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComponentStock_OrderItemsStock", Storage="_ComponentStock", ThisKey="ComponentStockId", OtherKey="Id", IsForeignKey=true)]
		public ComponentStock ComponentStock
		{
			get
			{
				return this._ComponentStock.Entity;
			}
			set
			{
				ComponentStock previousValue = this._ComponentStock.Entity;
				if (((previousValue != value) 
							|| (this._ComponentStock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComponentStock.Entity = null;
						previousValue.OrderItemsStocks.Remove(this);
					}
					this._ComponentStock.Entity = value;
					if ((value != null))
					{
						value.OrderItemsStocks.Add(this);
						this._ComponentStockId = value.Id;
					}
					else
					{
						this._ComponentStockId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ComponentStock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderItem_OrderItemsStock", Storage="_OrderItem", ThisKey="OrderItemId", OtherKey="Id", IsForeignKey=true)]
		public OrderItem OrderItem
		{
			get
			{
				return this._OrderItem.Entity;
			}
			set
			{
				OrderItem previousValue = this._OrderItem.Entity;
				if (((previousValue != value) 
							|| (this._OrderItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderItem.Entity = null;
						previousValue.OrderItemsStocks.Remove(this);
					}
					this._OrderItem.Entity = value;
					if ((value != null))
					{
						value.OrderItemsStocks.Add(this);
						this._OrderItemId = value.Id;
					}
					else
					{
						this._OrderItemId = default(int);
					}
					this.SendPropertyChanged("OrderItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductStock_OrderItemsStock", Storage="_ProductStock", ThisKey="ProductStockId", OtherKey="Id", IsForeignKey=true)]
		public ProductStock ProductStock
		{
			get
			{
				return this._ProductStock.Entity;
			}
			set
			{
				ProductStock previousValue = this._ProductStock.Entity;
				if (((previousValue != value) 
							|| (this._ProductStock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductStock.Entity = null;
						previousValue.OrderItemsStocks.Remove(this);
					}
					this._ProductStock.Entity = value;
					if ((value != null))
					{
						value.OrderItemsStocks.Add(this);
						this._ProductStockId = value.Id;
					}
					else
					{
						this._ProductStockId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductStock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class TempComponentStockQuantity
	{
		
		private int _ComponentStockId;
		
		private decimal _Quantity;
		
		public TempComponentStockQuantity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentStockId")]
		public int ComponentStockId
		{
			get
			{
				return this._ComponentStockId;
			}
			set
			{
				if ((this._ComponentStockId != value))
				{
					this._ComponentStockId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class TempProductStockQuantity
	{
		
		private int _ProductStockId;
		
		private decimal _Quantity;
		
		public TempProductStockQuantity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStockId")]
		public int ProductStockId
		{
			get
			{
				return this._ProductStockId;
			}
			set
			{
				if ((this._ProductStockId != value))
				{
					this._ProductStockId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CustomerId;
		
		private string _RegistrationNumber;
		
		private System.Nullable<int> _CarModelId;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<GiftCard> _GiftCards;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<CarModel> _CarModel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnRegistrationNumberChanging(string value);
    partial void OnRegistrationNumberChanged();
    partial void OnCarModelIdChanging(System.Nullable<int> value);
    partial void OnCarModelIdChanged();
    #endregion
		
		public Car()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._GiftCards = new EntitySet<GiftCard>(new Action<GiftCard>(this.attach_GiftCards), new Action<GiftCard>(this.detach_GiftCards));
			this._Customer = default(EntityRef<Customer>);
			this._CarModel = default(EntityRef<CarModel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RegistrationNumber
		{
			get
			{
				return this._RegistrationNumber;
			}
			set
			{
				if ((this._RegistrationNumber != value))
				{
					this.OnRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNumber = value;
					this.SendPropertyChanged("RegistrationNumber");
					this.OnRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarModelId", DbType="Int")]
		public System.Nullable<int> CarModelId
		{
			get
			{
				return this._CarModelId;
			}
			set
			{
				if ((this._CarModelId != value))
				{
					if (this._CarModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarModelIdChanging(value);
					this.SendPropertyChanging();
					this._CarModelId = value;
					this.SendPropertyChanged("CarModelId");
					this.OnCarModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Order", Storage="_Orders", ThisKey="Id", OtherKey="CarId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_GiftCard", Storage="_GiftCards", ThisKey="Id", OtherKey="CarId")]
		public EntitySet<GiftCard> GiftCards
		{
			get
			{
				return this._GiftCards;
			}
			set
			{
				this._GiftCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Car", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Car", Storage="_CarModel", ThisKey="CarModelId", OtherKey="Id", IsForeignKey=true)]
		public CarModel CarModel
		{
			get
			{
				return this._CarModel.Entity;
			}
			set
			{
				CarModel previousValue = this._CarModel.Entity;
				if (((previousValue != value) 
							|| (this._CarModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModel.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarModel.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarModelId = value.Id;
					}
					else
					{
						this._CarModelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarModel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_GiftCards(GiftCard entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_GiftCards(GiftCard entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrands")]
	public partial class CarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CarModel> _CarModels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CarBrand()
		{
			this._CarModels = new EntitySet<CarModel>(new Action<CarModel>(this.attach_CarModels), new Action<CarModel>(this.detach_CarModels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_CarModel", Storage="_CarModels", ThisKey="Id", OtherKey="CarBrandId")]
		public EntitySet<CarModel> CarModels
		{
			get
			{
				return this._CarModels;
			}
			set
			{
				this._CarModels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarModels(CarModel entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = this;
		}
		
		private void detach_CarModels(CarModel entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarModels")]
	public partial class CarModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CarBrandId;
		
		private EntitySet<Car> _Cars;
		
		private EntitySet<Price> _Prices;
		
		private EntityRef<CarBrand> _CarBrand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCarBrandIdChanging(int value);
    partial void OnCarBrandIdChanged();
    #endregion
		
		public CarModel()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._CarBrand = default(EntityRef<CarBrand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBrandId", DbType="Int NOT NULL")]
		public int CarBrandId
		{
			get
			{
				return this._CarBrandId;
			}
			set
			{
				if ((this._CarBrandId != value))
				{
					if (this._CarBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarBrandIdChanging(value);
					this.SendPropertyChanging();
					this._CarBrandId = value;
					this.SendPropertyChanged("CarBrandId");
					this.OnCarBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Car", Storage="_Cars", ThisKey="Id", OtherKey="CarModelId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Price", Storage="_Prices", ThisKey="Id", OtherKey="CarModelId")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_CarModel", Storage="_CarBrand", ThisKey="CarBrandId", OtherKey="Id", IsForeignKey=true)]
		public CarBrand CarBrand
		{
			get
			{
				return this._CarBrand.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarBrand.Entity;
				if (((previousValue != value) 
							|| (this._CarBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrand.Entity = null;
						previousValue.CarModels.Remove(this);
					}
					this._CarBrand.Entity = value;
					if ((value != null))
					{
						value.CarModels.Add(this);
						this._CarBrandId = value.Id;
					}
					else
					{
						this._CarBrandId = default(int);
					}
					this.SendPropertyChanged("CarBrand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prices")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private decimal _Amount;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _CarModelId;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntityRef<CarModel> _CarModel;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCarModelIdChanging(System.Nullable<int> value);
    partial void OnCarModelIdChanged();
    #endregion
		
		public Price()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._CarModel = default(EntityRef<CarModel>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarModelId", DbType="Int")]
		public System.Nullable<int> CarModelId
		{
			get
			{
				return this._CarModelId;
			}
			set
			{
				if ((this._CarModelId != value))
				{
					if (this._CarModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarModelIdChanging(value);
					this.SendPropertyChanging();
					this._CarModelId = value;
					this.SendPropertyChanged("CarModelId");
					this.OnCarModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Price_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="PriceId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Price", Storage="_CarModel", ThisKey="CarModelId", OtherKey="Id", IsForeignKey=true)]
		public CarModel CarModel
		{
			get
			{
				return this._CarModel.Entity;
			}
			set
			{
				CarModel previousValue = this._CarModel.Entity;
				if (((previousValue != value) 
							|| (this._CarModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModel.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._CarModel.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._CarModelId = value.Id;
					}
					else
					{
						this._CarModelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarModel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Price", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Price = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Price = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductGroups")]
	public partial class ProductGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProductGroup()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup_Product", Storage="_Products", ThisKey="Id", OtherKey="ProductGroupId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Unit;
		
		private bool _IsService;
		
		private System.Nullable<int> _ProductGroupId;
		
		private string _BarCode;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<ProductComponent> _ProductComponents;
		
		private EntitySet<ProductStock> _ProductStocks;
		
		private EntitySet<Price> _Prices;
		
		private EntityRef<ProductGroup> _ProductGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnIsServiceChanging(bool value);
    partial void OnIsServiceChanged();
    partial void OnProductGroupIdChanging(System.Nullable<int> value);
    partial void OnProductGroupIdChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    #endregion
		
		public Product()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._ProductComponents = new EntitySet<ProductComponent>(new Action<ProductComponent>(this.attach_ProductComponents), new Action<ProductComponent>(this.detach_ProductComponents));
			this._ProductStocks = new EntitySet<ProductStock>(new Action<ProductStock>(this.attach_ProductStocks), new Action<ProductStock>(this.detach_ProductStocks));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._ProductGroup = default(EntityRef<ProductGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsService", DbType="Bit NOT NULL")]
		public bool IsService
		{
			get
			{
				return this._IsService;
			}
			set
			{
				if ((this._IsService != value))
				{
					this.OnIsServiceChanging(value);
					this.SendPropertyChanging();
					this._IsService = value;
					this.SendPropertyChanged("IsService");
					this.OnIsServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroupId", DbType="Int")]
		public System.Nullable<int> ProductGroupId
		{
			get
			{
				return this._ProductGroupId;
			}
			set
			{
				if ((this._ProductGroupId != value))
				{
					if (this._ProductGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroupId = value;
					this.SendPropertyChanged("ProductGroupId");
					this.OnProductGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NChar(13)")]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductComponent", Storage="_ProductComponents", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductComponent> ProductComponents
		{
			get
			{
				return this._ProductComponents;
			}
			set
			{
				this._ProductComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductStock", Storage="_ProductStocks", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductStock> ProductStocks
		{
			get
			{
				return this._ProductStocks;
			}
			set
			{
				this._ProductStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Price", Storage="_Prices", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup_Product", Storage="_ProductGroup", ThisKey="ProductGroupId", OtherKey="Id", IsForeignKey=true)]
		public ProductGroup ProductGroup
		{
			get
			{
				return this._ProductGroup.Entity;
			}
			set
			{
				ProductGroup previousValue = this._ProductGroup.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductGroup.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductGroupId = value.Id;
					}
					else
					{
						this._ProductGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductComponents(ProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductComponents(ProductComponent entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductStocks(ProductStock entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductStocks(ProductStock entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _NationalId;
		
		private string _Telephone;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnNationalIdChanging(string value);
    partial void OnNationalIdChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employee()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalId", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string NationalId
		{
			get
			{
				return this._NationalId;
			}
			set
			{
				if ((this._NationalId != value))
				{
					this.OnNationalIdChanging(value);
					this.SendPropertyChanging();
					this._NationalId = value;
					this.SendPropertyChanged("NationalId");
					this.OnNationalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(10)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(10)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Orders", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CarId;
		
		private System.DateTime _OrderDate;
		
		private System.DateTime _AppointmentDate;
		
		private System.Nullable<System.DateTime> _AcceptedDate;
		
		private System.Nullable<decimal> _Paid;
		
		private System.Nullable<int> _SlotNumber;
		
		private string _Note;
		
		private System.Nullable<int> _EmployeeId;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCarIdChanging(System.Nullable<int> value);
    partial void OnCarIdChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnAppointmentDateChanging(System.DateTime value);
    partial void OnAppointmentDateChanged();
    partial void OnAcceptedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedDateChanged();
    partial void OnPaidChanging(System.Nullable<decimal> value);
    partial void OnPaidChanged();
    partial void OnSlotNumberChanging(System.Nullable<int> value);
    partial void OnSlotNumberChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public Order()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Car = default(EntityRef<Car>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarId", DbType="Int")]
		public System.Nullable<int> CarId
		{
			get
			{
				return this._CarId;
			}
			set
			{
				if ((this._CarId != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIdChanging(value);
					this.SendPropertyChanging();
					this._CarId = value;
					this.SendPropertyChanged("CarId");
					this.OnCarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDate", DbType="DateTime NOT NULL")]
		public System.DateTime AppointmentDate
		{
			get
			{
				return this._AppointmentDate;
			}
			set
			{
				if ((this._AppointmentDate != value))
				{
					this.OnAppointmentDateChanging(value);
					this.SendPropertyChanging();
					this._AppointmentDate = value;
					this.SendPropertyChanged("AppointmentDate");
					this.OnAppointmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedDate
		{
			get
			{
				return this._AcceptedDate;
			}
			set
			{
				if ((this._AcceptedDate != value))
				{
					this.OnAcceptedDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptedDate = value;
					this.SendPropertyChanged("AcceptedDate");
					this.OnAcceptedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Money")]
		public System.Nullable<decimal> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotNumber", DbType="Int")]
		public System.Nullable<int> SlotNumber
		{
			get
			{
				return this._SlotNumber;
			}
			set
			{
				if ((this._SlotNumber != value))
				{
					this.OnSlotNumberChanging(value);
					this.SendPropertyChanging();
					this._SlotNumber = value;
					this.SendPropertyChanged("SlotNumber");
					this.OnSlotNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(300)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Order", Storage="_Car", ThisKey="CarId", OtherKey="Id", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CarId = value.Id;
					}
					else
					{
						this._CarId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GiftCard")]
	public partial class GiftCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Number;
		
		private int _OriginalQuantity;
		
		private int _CurrentQuantity;
		
		private int _CarId;
		
		private decimal _Price;
		
		private EntitySet<GiftCardUsage> _GiftCardUsages;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnOriginalQuantityChanging(int value);
    partial void OnOriginalQuantityChanged();
    partial void OnCurrentQuantityChanging(int value);
    partial void OnCurrentQuantityChanged();
    partial void OnCarIdChanging(int value);
    partial void OnCarIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public GiftCard()
		{
			this._GiftCardUsages = new EntitySet<GiftCardUsage>(new Action<GiftCardUsage>(this.attach_GiftCardUsages), new Action<GiftCardUsage>(this.detach_GiftCardUsages));
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalQuantity", DbType="Int NOT NULL")]
		public int OriginalQuantity
		{
			get
			{
				return this._OriginalQuantity;
			}
			set
			{
				if ((this._OriginalQuantity != value))
				{
					this.OnOriginalQuantityChanging(value);
					this.SendPropertyChanging();
					this._OriginalQuantity = value;
					this.SendPropertyChanged("OriginalQuantity");
					this.OnOriginalQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentQuantity", DbType="Int NOT NULL")]
		public int CurrentQuantity
		{
			get
			{
				return this._CurrentQuantity;
			}
			set
			{
				if ((this._CurrentQuantity != value))
				{
					this.OnCurrentQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurrentQuantity = value;
					this.SendPropertyChanged("CurrentQuantity");
					this.OnCurrentQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarId", DbType="Int NOT NULL")]
		public int CarId
		{
			get
			{
				return this._CarId;
			}
			set
			{
				if ((this._CarId != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIdChanging(value);
					this.SendPropertyChanging();
					this._CarId = value;
					this.SendPropertyChanged("CarId");
					this.OnCarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GiftCard_GiftCardUsage", Storage="_GiftCardUsages", ThisKey="Id", OtherKey="GiftCardId")]
		public EntitySet<GiftCardUsage> GiftCardUsages
		{
			get
			{
				return this._GiftCardUsages;
			}
			set
			{
				this._GiftCardUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_GiftCard", Storage="_Car", ThisKey="CarId", OtherKey="Id", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.GiftCards.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.GiftCards.Add(this);
						this._CarId = value.Id;
					}
					else
					{
						this._CarId = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GiftCardUsages(GiftCardUsage entity)
		{
			this.SendPropertyChanging();
			entity.GiftCard = this;
		}
		
		private void detach_GiftCardUsages(GiftCardUsage entity)
		{
			this.SendPropertyChanging();
			entity.GiftCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GiftCardUsage")]
	public partial class GiftCardUsage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private int _GiftCardId;
		
		private EntityRef<GiftCard> _GiftCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnGiftCardIdChanging(int value);
    partial void OnGiftCardIdChanged();
    #endregion
		
		public GiftCardUsage()
		{
			this._GiftCard = default(EntityRef<GiftCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftCardId", DbType="Int NOT NULL")]
		public int GiftCardId
		{
			get
			{
				return this._GiftCardId;
			}
			set
			{
				if ((this._GiftCardId != value))
				{
					if (this._GiftCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGiftCardIdChanging(value);
					this.SendPropertyChanging();
					this._GiftCardId = value;
					this.SendPropertyChanged("GiftCardId");
					this.OnGiftCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GiftCard_GiftCardUsage", Storage="_GiftCard", ThisKey="GiftCardId", OtherKey="Id", IsForeignKey=true)]
		public GiftCard GiftCard
		{
			get
			{
				return this._GiftCard.Entity;
			}
			set
			{
				GiftCard previousValue = this._GiftCard.Entity;
				if (((previousValue != value) 
							|| (this._GiftCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GiftCard.Entity = null;
						previousValue.GiftCardUsages.Remove(this);
					}
					this._GiftCard.Entity = value;
					if ((value != null))
					{
						value.GiftCardUsages.Add(this);
						this._GiftCardId = value.Id;
					}
					else
					{
						this._GiftCardId = default(int);
					}
					this.SendPropertyChanged("GiftCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
